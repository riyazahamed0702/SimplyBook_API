{
	"info": {
		"_postman_id": "ea6e9fbb-254b-4fc7-8a77-f02a3f6b01db",
		"name": "Books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42850443"
	},
	"item": [
		{
			"name": "UserToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Result, id, and jsonrpc are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('result', 'id', 'jsonrpc');",
							"});",
							"",
							"",
							"pm.test(\"Result is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.result).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"ID is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string');",
							"    pm.expect(responseData.id).to.match(/[a-f\\d]{8}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{12}/i, \"ID should be in a valid format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"jsonrpc\": \"2.0\",\r\n  \"method\": \"getUserToken\",\r\n  \"params\": {\r\n    \"companyLogin\": \"nandhinibooks\",\r\n    \"userLogin\": \"nandhudarlz.nandhudarlz@gmail.com\",\r\n    \"userPassword\": \"Nandhu@3108\"\r\n  },\r\n  \"id\": 1\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://user-api.simplybook.me/login",
					"protocol": "https",
					"host": [
						"user-api",
						"simplybook",
						"me"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Response time is less than 200ms\", function () {\r",
							"//   pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"// });\r",
							"\r",
							"\r",
							"// pm.test(\"The response should be an empty string\", function () {\r",
							"//     pm.expect(pm.response.text()).to.equal(\"\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"service_id\": 1,\r\n  \"client\": \"nandhu\",\r\n  \"time_slot\": \"2025-03-19\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://nandhinibooks.secure.simplybook.me/v1/bookings",
					"protocol": "https",
					"host": [
						"nandhinibooks",
						"secure",
						"simplybook",
						"me"
					],
					"path": [
						"v1",
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Services",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Updated the test to handle the response as JSON\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a list of services\", function () {\r",
							"    let responseData = pm.response.json(); // Updated to handle JSON response\r",
							"    pm.expect(responseData).to.have.property('services');  // Ensure it contains the property \"services\"\r",
							"});\r",
							"\r",
							"pm.test(\"Response is valid JSON\", function () {\r",
							"    try {\r",
							"        JSON.parse(pm.response.text()); // Parse the response as JSON\r",
							"    } catch (e) {\r",
							"        throw new Error(\"JSON parsing failed\"); // Throw an error if parsing fails\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Company-Login",
						"value": "nandhinibooks",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "Bearer  53588f6e7d7679c0c55f403eec88f6bbb9b826012cdb500369423f48f59ac052",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://user-api.simplybook.me/v1/api/service",
					"protocol": "https",
					"host": [
						"user-api",
						"simplybook",
						"me"
					],
					"path": [
						"v1",
						"api",
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "Services Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Updated the test to handle the response as JSON\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a list of services\", function () {\r",
							"    let responseData = pm.response.json(); // Updated to handle JSON response\r",
							"    pm.expect(responseData).to.have.property('services');  // Ensure it contains the property \"services\"\r",
							"});\r",
							"\r",
							"pm.test(\"Response is valid JSON\", function () {\r",
							"    try {\r",
							"        JSON.parse(pm.response.text()); // Parse the response as JSON\r",
							"    } catch (e) {\r",
							"        throw new Error(\"JSON parsing failed\"); // Throw an error if parsing fails\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a list of services\", function () {\r",
							"    let jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if it's an object\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"\r",
							"    // Ensure it's not empty\r",
							"    pm.expect(Object.keys(jsonData.services).length).to.be.greaterThan(0);\r",
							"\r",
							"    Object.values(jsonData.services).forEach(service => {\r",
							"        pm.expect(service).to.be.an('object');\r",
							"\r",
							"        // Ensure required properties exist and have correct types\r",
							"        pm.expect(service).to.have.property(\"envelope\").that.is.a(\"string\");\r",
							"        pm.expect(service).to.have.property(\"transport\").that.is.a(\"string\");\r",
							"        pm.expect(service.parameters).to.be.an('array');\r",
							"        pm.expect(service.returns).to.be.an('array');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "6ca24059c959a576b6501ab7ca5cc2620a3768dbb75ba8a726630ebec571472f",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Company-Login",
						"value": "nandhinibooks",
						"type": "text"
					},
					{
						"key": "X-Token",
						"value": "80c253836c277fd33e1d75ccba2a86f37c2946ebff88b23464b7515df078ac9e",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://user-api.simplybook.me/v2/rest/service",
					"protocol": "https",
					"host": [
						"user-api",
						"simplybook",
						"me"
					],
					"path": [
						"v2",
						"rest",
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://user-api.simplybook.me/v2/rest/service",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://user-api.simplybook.me/v2/rest/service",
					"protocol": "https",
					"host": [
						"user-api",
						"simplybook",
						"me"
					],
					"path": [
						"v2",
						"rest",
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "book",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://nandhinibooks.secure.simplybook.me/v2/api/v1/bookings?type=upcoming",
					"protocol": "https",
					"host": [
						"nandhinibooks",
						"secure",
						"simplybook",
						"me"
					],
					"path": [
						"v2",
						"api",
						"v1",
						"bookings"
					],
					"query": [
						{
							"key": "type",
							"value": "upcoming"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SERV",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Error</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.error}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "f6c9efcfe35e033c0f44ccc78f54369737bf66137c1b310b563bd8fc7d383763",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-CSRF-Token",
						"value": "f6c9efcfe35e033c0f44ccc78f54369737bf66137c1b310b563bd8fc7d383763",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "Bearer f6c9efcfe35e033c0f44ccc78f54369737bf66137c1b310b563bd8fc7d383763",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"1\",\r\n    \"method\": \"getToken\",\r\n    \"params\": {\r\n        \"companyLogin\": \"nandhinibooks\",\r\n    \"userLogin\": \"nandhudarlz.nandhudarlz@gmail.com\",\r\n    \"userPassword\": \"Nandhu@3108\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://nandhinibooks.secure.simplybook.me/v2/rest/service",
					"protocol": "https",
					"host": [
						"nandhinibooks",
						"secure",
						"simplybook",
						"me"
					],
					"path": [
						"v2",
						"rest",
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://nandhinibooks.secure.simplybook.me/v2/rest/service",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "89431ad8591acbb0f2c82363f8527a92205c615dc6f4fe9f259a77ee3273c426\n",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://nandhinibooks.secure.simplybook.me/v2/rest/service",
					"protocol": "https",
					"host": [
						"nandhinibooks",
						"secure",
						"simplybook",
						"me"
					],
					"path": [
						"v2",
						"rest",
						"service"
					],
					"query": [
						{
							"key": "v",
							"value": "stbe4hen",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"{\r",
					"  \"jsonrpc\": \"2.0\",\r",
					"  \"method\": \"getUserToken\",\r",
					"  \"params\": {\r",
					"    \"companyLogin\": \"nandhinibooks\",\r",
					"    \"userLogin\": \"nandhudarlz.nandhudarlz@gmail.com\",\r",
					"    \"userPassword\": \"Nandhu@3108\"\r",
					"  },\r",
					"  \"id\": 1\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	]
}